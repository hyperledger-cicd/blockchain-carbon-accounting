export enum requestStateType {
  PROCESSING = 'PROCESSING',
  FINISHED = 'FINISHED',
}

export enum requestCallerType {
  CLIENT = 'CLIENT',
  MSP = 'MSP',
}
export interface IRequest {
  id: string;
  state: requestStateType;
  currentStageName: string;
  currentStageState: string;
  callerType: requestCallerType;
  callerId: string;
  createdAt: number;
  stageData: { [key: string]: IStageData };
}

export interface IStageData {
  blockchainData: IBlockchainData[];
  outputs: { [key: string]: { [key: string]: string } };
}

export interface IBlockchainData {
  network: string;
  contractAddress: string;
  keysCreated: { [key: string]: string };
}

export interface IStageUpdateInput {
  requestId: string;
  name: string;
  stageState: string;
  fabricDataLocks?: { [key: string]: IRequestDataChaincodeInput };
  fabricDataFree?: { [key: string]: IRequestDataChaincodeInput };
  isLast: boolean;
  blockchainData?: IBlockchainData[];
  callerType?: requestCallerType;
}
export interface IRequestDataChaincodeInput {
  methodName: string;
  input: IDataChaincodeInput;
}

export interface IDataChaincodeInput {
  keys: string[];
  // parameters accepted by the chaincode, should be base64 encoded of json object
  params?: string;
}

export interface IStageUpdateOutput {
  // key : chaincode name
  // value : base64 encoded json output generated by the data chaincode
  fabricDataLocks: Map<string, string>;
  fabricDataFree: Map<string, string>;
}
////////////////////////////////////////////////

export interface IRecordAuditedEmissionsInput {
  partyId: string;
  addressToIssue: string;
  emissionsRecordsToAudit: string[];
  automaticRetireDate: string;
}
